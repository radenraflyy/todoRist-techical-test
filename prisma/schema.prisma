generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

generator dbml {
  provider            = "prisma-dbml-generator"
  outputName          = "schema.dbml"
  projectName         = "Project Sistem Manajemen Tugas (Todo List)"
  projectDatabaseType = "PostgreSQL"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext(map: "citext")]
}

model users {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String        @db.VarChar()
  email           String        @db.VarChar()
  password        String        @db.VarChar()
  refresh_token   String?       @unique
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  deleted_at      DateTime?     @db.Timestamp(6)
  created_by      String?       @db.Uuid
  updated_by      String?       @db.Uuid
  deleted_by      String?       @db.Uuid
  todos           todos[]
  label_todos     label_todos[]
}

model todos {
  id          String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String               @db.Uuid
  title       String               @db.VarChar()
  description String?              @db.Text
  due_date    DateTime?            @db.Timestamp(6)
  is_done     Boolean              @default(false)
  priority    EnumPriorityTodoType
  user        users                @relation(fields: [user_id], references: [id])
  label_ids   todo_label_pivot[]

  created_at DateTime   @default(now()) @db.Timestamp(6)
  updated_at DateTime   @default(now()) @db.Timestamp(6)
  deleted_at DateTime?  @db.Timestamp(6)
  created_by String?    @db.Uuid
  updated_by String?    @db.Uuid
  deleted_by String?    @db.Uuid
  comments   comments[]
}

model todo_label_pivot {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  todo_id  String @db.Uuid
  label_id String @db.Uuid

  todo       todos       @relation(fields: [todo_id], references: [id])
  label      label_todos @relation(fields: [label_id], references: [id])
  created_at DateTime    @default(now()) @db.Timestamp(6)
  updated_at DateTime    @default(now()) @db.Timestamp(6)
  deleted_at DateTime?   @db.Timestamp(6)
  created_by String?     @db.Uuid
  updated_by String?     @db.Uuid
  deleted_by String?     @db.Uuid
}

model comments {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  todo_id    String    @db.Uuid
  todo       todos     @relation(fields: [todo_id], references: [id])
  comment    String    @db.Text
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  deleted_at DateTime? @db.Timestamp(6)
  created_by String?   @db.Uuid
  updated_by String?   @db.Uuid
  deleted_by String?   @db.Uuid
}

model label_todos {
  id        String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String             @db.VarChar()
  user_id   String             @db.Uuid
  user      users              @relation(fields: [user_id], references: [id])
  label_ids todo_label_pivot[]

  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  deleted_at DateTime? @db.Timestamp(6)
  created_by String?   @db.Uuid
  updated_by String?   @db.Uuid
  deleted_by String?   @db.Uuid
}

enum EnumPriorityTodoType {
  Priority1 @map("1")
  Priority2 @map("2")
  Priority3 @map("3")
  Priority4 @map("4")
}
