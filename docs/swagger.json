{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Login with email and password, returns tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Login user payload",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success login response with tokens",
                        "schema": {
                            "$ref": "#/definitions/auth.LoginResponse"
                        }
                    },
                    "422": {
                        "description": "Validation errors",
                        "schema": {
                            "$ref": "#/definitions/exception.CustomException"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "get": {
                "description": "Logout user by clearing refresh token cookie",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logout user",
                "responses": {
                    "200": {
                        "description": "Success logout response",
                        "schema": {
                            "$ref": "#/definitions/auth.SuccessResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh-token": {
            "get": {
                "description": "Get new access token using refresh token cookie",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh access token",
                "responses": {
                    "200": {
                        "description": "New access token response",
                        "schema": {
                            "$ref": "#/definitions/auth.RefreshTokenResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or invalid token",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a new user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Register user payload",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success response",
                        "schema": {
                            "$ref": "#/definitions/auth.SuccessResponse"
                        }
                    },
                    "422": {
                        "description": "Validation errors",
                        "schema": {
                            "$ref": "#/definitions/exception.CustomException"
                        }
                    }
                }
            }
        },
        "/todos": {
            "post": {
                "description": "Endpoint ini membuat satu todo baru",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "todos"
                ],
                "summary": "Buat todo baru",
                "parameters": [
                    {
                        "description": "Payload untuk membuat todo",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/todos.CreateTodoRequest"
                        }
                    }
                ],
                "responses": {}
            },
            "patch": {
                "description": "Menandai satu atau banyak todo sebagai done/undone",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "todos"
                ],
                "summary": "Update status todo",
                "parameters": [
                    {
                        "description": "Payload update status todo",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/todos.UpdateTodoRequest"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/todos/comment/{todo_id}": {
            "post": {
                "description": "Endpoint ini menambahkan komentar pada todo tertentu",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "todos"
                ],
                "summary": "Tambah komentar ke todo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID todo",
                        "name": "todo_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Payload komentar",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/todos.CreateCommentRequest"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/todos/label": {
            "post": {
                "description": "Endpoint ini membuat satu label baru untuk todo",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "todos"
                ],
                "summary": "Buat label baru",
                "parameters": [
                    {
                        "description": "Payload untuk membuat label",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/todos.CreateLabelRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/todos.CreateLabelResponse"
                        }
                    }
                }
            }
        },
        "/todos/list-label": {
            "get": {
                "description": "Mengambil semua label untuk user yang sedang login",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "todos"
                ],
                "summary": "Daftar semua label",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/todos.GetAllLabelsResponse"
                        }
                    }
                }
            }
        },
        "/todos/list-todo": {
            "get": {
                "description": "Mengambil daftar todo â€” sudah support pagination, search, filter",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "todos"
                ],
                "summary": "Daftar semua todo",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit per halaman",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Halaman (1-based)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Keyword pencarian",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter status (true/false)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter prioritas",
                        "name": "priority",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter tanggal (YYYY-MM-DD)",
                        "name": "due_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/todos.GetAllTodosResponse"
                        }
                    }
                }
            }
        },
        "/todos/{todo_id}": {
            "delete": {
                "description": "Menghapus satu todo berdasarkan ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "todos"
                ],
                "summary": "Hapus todo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID todo yang akan dihapus",
                        "name": "todo_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        }
    },
    "definitions": {
        "auth.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "error message"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 400
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "auth.GetUserModel": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "auth.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "auth.LoginResponse": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/auth.GetUserModel"
                }
            }
        },
        "auth.RefreshTokenResponse": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/auth.GetUserModel"
                }
            }
        },
        "auth.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "minLength": 6
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "auth.SuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 200
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "exception.CustomException": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "todos.CreateCommentRequest": {
            "type": "object",
            "required": [
                "comment"
            ],
            "properties": {
                "comment": {
                    "type": "string"
                },
                "todo_id": {
                    "type": "string"
                }
            }
        },
        "todos.CreateLabelRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "todos.CreateLabelResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "todos.CreateTodoRequest": {
            "type": "object",
            "required": [
                "description",
                "due_date",
                "title"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "due_date": {
                    "type": "string"
                },
                "is_done": {
                    "type": "boolean"
                },
                "label": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "priority": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "todos.GetAllLabelsResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "todos.GetAllTodosResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "due_date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_done": {
                    "type": "boolean"
                },
                "priority": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "todos.UpdateTodoRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "is_done": {
                    "type": "boolean"
                }
            }
        }
    }
}